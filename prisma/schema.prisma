// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  verifiedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userRoles         UserRole[]         @relation("UserRolesOwner")
  assignedRoles     UserRole[]         @relation("UserRolesAssigner")
  Otp               Otp[]
  OtpRateLimit      OtpRateLimit[]
  UserSession       Token[]
  LoginRateLimit    LoginRateLimit[]
  TwoFactorSettings TwoFactorSetting[]
}

enum OtpChannel {
  EMAIL
  SMS
}

enum OtpPurpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTHENTICATION
  TWO_FACTOR_VERIFICATION
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
}

model Otp {
  id        String     @id @default(uuid())
  userId    String
  code      String
  channel   OtpChannel
  purpose   OtpPurpose
  usedAt    DateTime?
  revokedAt DateTime?
  expiresAt DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])

  @@unique([userId, code, purpose])
  @@index([expiresAt])
}

model Token {
  id         String    @id @default(uuid())
  userId     String
  type       TokenType
  ipAddress  String?
  userAgent  String?
  consumedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@index([expiresAt])
}

model LoginRateLimit {
  userId      String   @id
  attempts    Int      @default(0)
  windowStart DateTime
  windowEnd   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@index([windowStart])
}

model OtpRateLimit {
  id          String     @id @default(uuid())
  userId      String
  channel     OtpChannel
  purpose     OtpPurpose
  attempts    Int        @default(0)
  windowStart DateTime
  windowEnd   DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])

  @@unique([userId, channel, purpose])
}

enum TwoFactorMethod {
  TOTP
  EMAIL_OTP
  SMS_OTP
}

model TwoFactorSetting {
  id                      String           @id @default(uuid())
  userId                  String
  isEnabled               Boolean          @default(false)
  method                  TwoFactorMethod
  secretCiphertext        String?
  secretMetadata          String?
  verifiedAt              DateTime?
  lastUsedAt              DateTime?
  pendingMethod           TwoFactorMethod?
  pendingSecretCiphertext String?
  pendingSecretMetadata   String?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  user                    User             @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Role {
  id          String     @id @default(uuid())
  name        String
  description String?
  realm       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]

  @@unique([name, realm])
}

model UserRole {
  id           String   @id @default(uuid())
  userId       String
  roleId       String
  assignedById String?
  assignedAt   DateTime @default(now())
  user         User     @relation("UserRolesOwner", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy   User?    @relation("UserRolesAssigner", fields: [assignedById], references: [id], onDelete: SetNull)
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
}
